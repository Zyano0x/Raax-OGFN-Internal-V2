#include "exploits.h"

#include <cheat/cache/pickupcache.h>
#include <cheat/core.h>
#include <drawing/drawing.h>
#include <config/config.h>
#include <cheat/autorevertfeature.h>

namespace Features {
namespace Exploits {

// --- Exploit Tick Functions ----------------------------------------

void WeaponExploits() {
    const auto& Config = Config::g_Config.Exploit;
    auto* const LocalPawn = SDK::Cast<SDK::AFortPawn>(SDK::GetLocalPawn());
    if (!LocalPawn)
        return;

    SDK::AFortWeapon* Weapon = LocalPawn->CurrentWeapon;
    if (!SDK::AFortWeapon::GetWeaponStats_Idx || !Weapon)
        return;

    SDK::FFortBaseWeaponStats* WeaponStats = Weapon->GetWeaponStats();
    if (!WeaponStats)
        return;

    SDK::AFortWeaponRanged* WeaponRanged = SDK::Cast<SDK::AFortWeaponRanged>(Weapon);
    if (WeaponRanged) {
        SDK::FFortRangedWeaponStats* RangedWeaponStats = static_cast<SDK::FFortRangedWeaponStats*>(WeaponStats);
        if (Config.NoSpread) {
            // still dont know why weapons still have spread if you dont change all the "multipliers"
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->Spread, 0.f, &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->SpreadDownsights, 0.f, &Config.NoSpreadAmount,
                                             &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->StandingStillSpreadMultiplier, 0.f,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->AthenaCrouchingSpreadMultiplier, 0.f,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->AthenaJumpingFallingSpreadMultiplier, 0.f,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->AthenaSprintingSpreadMultiplier, 0.f,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->MinSpeedForSpreadMultiplier, FLT_MAX,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->MaxSpeedForSpreadMultiplier, FLT_MAX,
                                             &Config.NoSpreadAmount, &Config.NoSpread);
        }

        if (Config.NoRecoil) {
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->RecoilVert, 0.f, &Config.NoRecoilAmount,
                                             &Config.NoRecoil);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->RecoilVertScaleGamepad, 0.f, &Config.NoRecoilAmount,
                                             &Config.NoRecoil);
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->RecoilHoriz, 0.f, &Config.NoRecoilAmount,
                                             &Config.NoRecoil);
        }

        if (Config.NoReload) {
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->ReloadTime, 0.f, &Config.NoReloadAmount,
                                             &Config.NoRecoil);
        }

        if (Config.RapidFire) {
            AutoRevertFeature::CreateScaling(&RangedWeaponStats->FiringRate, RangedWeaponStats->FiringRate * 50,
                                             &Config.RapidFireAmount, &Config.RapidFire);
        }

        return;
    }

    SDK::AB_Melee_Generic_C* MeleeWeapon = SDK::Cast<SDK::AB_Melee_Generic_C>(Weapon);
    if (MeleeWeapon) {
        SDK::FFortMeleeWeaponStats* MeleeWeaponStats = static_cast<SDK::FFortMeleeWeaponStats*>(WeaponStats);
        if (Config.FastPickaxe) {
            AutoRevertFeature::CreateScaling(&MeleeWeaponStats->SwingPlaySpeed, MeleeWeaponStats->SwingPlaySpeed * 50.f,
                                             &Config.FastPickaxeSpeed, &Config.FastPickaxe);
        }

        return;
    }
}

// --- Public Tick Functions -----------------------------------------

void TickGameThread() {
    const auto& Config = Config::g_Config.Exploit;
    auto* const LocalPawn = SDK::Cast<SDK::AFortPlayerPawnAthena>(SDK::GetLocalPawn());
    if (!LocalPawn)
        return;

    WeaponExploits();

    if (Config.InstantRevive) {
        LocalPawn->ReviveFromDBNOTime = 0.1f;
    }
}

} // namespace Exploits
} // namespace Features
